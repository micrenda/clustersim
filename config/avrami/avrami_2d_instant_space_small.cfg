#
# This file contains the setting to be used for the simulation
#
#
simulation:
{
# Specify the basename. A director starting with this name will be created containing all the output files
basename="avrami_2d_instant_space_small"

# Specify the dimensions of the system
# values: 1D, 2D, 3D, 4D, 5D ...
dimensions="2D"

# Specify the dimension of the container in pixels
container_size=[800, 800]

# Specify how many timeframe must be simulates
duration=150

# Specify if the simulation must stop when the volume is 100% filled (does not wait until t = duration-1)
# The value must be between 0.0 and 1.0 (ie: 0.9 => 90%)
stop_when_volume_is=0.95

# Specify how the behaviour of the container. If it is false, a cluster can not to grow over the container boundaries (like in real system). But when we are simulating systems with many dimensions (ex. 6D)
# we have to use containers with side not too big (to don't occupy too much memory). The avrami index can be affected by this, so here we give another possibily to mitigate this problem.
# Setting true to this parameter, we will have a container with infinite side. When a cluster pass over a container boundaries, it will grow in the opposite side of the container. This can be modelled
# like the volume is a periodic cell of an infinite bulk material
periodic_boundaries = false

# Specify which rules must to follow the cluster grow process. By default (false) a cluster can assimilate a pixel if both conditions are respected:
# 1. The pixel is inside the cluster radius
# 2. The pixel as a neighbur pixel of the same cluster.
#
# If we set true this value just the first condition must be respected. This elaboration is faster but less realistic and it is more near to the Avrami hypothesis. 
unconstrained_grow = false

# Specify which range of data are used to fit the n and k coefficients (extrenities can give wrong results).
avrami_fit_min_volume=0.30
avrami_fit_max_volume=0.90

# Function to determinate how many new cluster to add at every timeframe
# Variables:
#   t   time frame (0 to duration-1)
#   s   total duration
#   d   dimensions of the system (1->1D, 2-> 2D, etc.)
#   m   space volume
#
# Examples:
#
# create 10 cluster at the beginning
# "if t == 0 then return 10 else return 0 end;"
#
# create 5 cluster at every time frame
# "return 5;"
#
# create clusters with a gaussian distribution in time
# "return gaussian(t, 10, s/2, s/8, 0)"
cluster_creation_func="if t == 0 then return 50 else return 0 end;"

# Function to determinate how much will grow the radius of every cluster
#   i   current cluster id.
#   t   current time frame.
#   s   duration.
#   r   current cluster radius.
#   v   current cluster volume.
#   c   cluster creation time frame (0,1,...).
#   d   dimensions of the system (1 => 1D, 2 => 2D, etc.)
#   m   space volume
#
# Examples:
#
# To grow linear with 5 pixels:
# "return 5;"
#
# To grow only up to a given radius 50:
# "if r <= 50 then return 2 else return 0 end;"
#
# To grow half of the clusters with a speed and another half with another speed
# "if i % 2 == 0 then return 2 else return 3 end;"
cluster_grow_func="return 1;"

# Function to determinate where to positionate every new cluster
#
# It is possible to specify one these formats:
#
# To use the same formula for all axes:
#   cluster_position_func=""
# To use a different formula for every axis (up to 3):
#   cluster_position_func_x=""
#   cluster_position_func_y=""
#   cluster_position_func_z=""
# To use a different formula for every axis (more then 3 axis):
#   cluster_position_func_r1=""
#   cluster_position_func_r2=""
#   cluster_position_func_r3=""
#
# (if no formula is give, the points are placed randomly inside the container)
#
#
# Variables:
#   i   current cluster id.
#   j   counter that indicate the inserting order (start from 0 and is resetted at every timeframe).
#   t   current time frame.
#   s   total duration.
#   w   container size in the current dimension.
#   d   dimensions of the system (1 => 1D, 2 => 2D, etc.)
#   m   space volume
#
# Examples:
#
# To put them random in plane x,y
# cluster_position_func_x="return math.random(0, w-1)"
# cluster_position_func_y="return math.random(0, w-1)"
# cluster_position_func_z="return w/2;"
cluster_position_func=""



# Contains some common functions that can be used by other functions
#
# Example: define the gaussian function according:
# http://en.wikipedia.org/wiki/Gaussian_function
common_func_1 = "function gaussian(x, a, b, c, d) return a * math.exp(- (x - b)^2 / (2*c^2))+d; end;"
}

# Specify which projections must be rendered
# For gradient colors it is possible to use http://colorbrewer2.org/ gradients

render_1:
{
name   = "color_random"
axis_1 = "x"
axis_2 = "y"
cuts   = ""
color_scheme = "RANDOM_ACID"
}

render_2:
{
name   = "color_by_age"
axis_1 = "x"
axis_2 = "y"
cuts   = ""
color_scheme = "GRADIENT_AGE"
color_1      = 0xf0f9e8
color_2      = 0xbae4bc
color_3      = 0x7bccc4
color_4      = 0x2b8cbe

}

render_3:
{
name   = "color_by_radius"
axis_1 = "x"
axis_2 = "y"
cuts   = ""
color_scheme = "GRADIENT_RADIUS"

color_1      = 0x9ebcda
color_2      = 0x8c96c6
color_3      = 0x8c6bb1
color_4      = 0x88419d
color_5      = 0x810f7c
color_6      = 0x4d004b
}

render_4:
{
name   = "color_by_born"
axis_1 = "x"
axis_2 = "y"
cuts   = ""
color_scheme = "GRADIENT_BIRTH"
color_1      = 0x99daff
color_2      = 0x001380
}
